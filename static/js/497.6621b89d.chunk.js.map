{"version":3,"file":"static/js/497.6621b89d.chunk.js","mappings":"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","sources":["components/ContactForm/styled.js","components/ContactForm/ContactForm.jsx","components/Filter/styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","pages/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n    display: inline-flex;\n    flex-direction: column;\n    gap: 30px;\n    border-radius: 4px;\n    color: rgb(243,229,171);\n    padding: 25px;\n    font-family: 'Playfair Display', serif;\n    font-size: 20px;\n    text-align: left;\n`;\n\n\n// для лейбла\n// color: rgba(0, 0, 0, 0.6);\n// font-weight: 400;\n// font-size: \n// padding: 0px;\n// display: block;\n// transform-origin: left top;\n// white-space: nowrap;\n// overflow: hidden;\n// text-overflow: ellipsis;\n// max-width: calc(100% - 24px);\n// position: absolute;\n// left: 0px;\n// top: 0px;\n// transform: translate(14px, 16px) scale(1);\n// transition: color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms, transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms, max-width 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;\n// z-index: 1;\n// pointer-events: none;\n\n\n\nexport const Input = styled.input`\n    display: block;\n    margin-top: 5px;\n    color: rgb(240,220,130);\n    padding: 7px 10px;\n    font-family: 'Playfair Display', serif;\n    font-size: 20px;\n    border-radius: 4px;\n    background-color: #4e5b314b;\n    letter-spacing: 1.3px;\n    border-color: #f9a504;\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    outline: none;\n    \n    box-shadow: #f9a504 0px 30px 60px -70px inset, rgba(0, 0, 0, 0.9) 0px 18px 36px -18px inset;\n        &:hover,\n        &:focus {\n            border: 2px solid #f9a504;\n        }\n        &::placeholder {\n            color: rgb(240,220,130);\n            font-style: italic;\n        }\n        &:valid:not(:placeholder-shown) {\n            background-color: rgba(153, 205, 50, 0.315);\n        }\n        &:not(:valid):not(:placeholder-shown) {\n            background-color: rgba(184, 59, 59, 0.24);\n        }\n`;\n\nexport const Button = styled.button`\n    background-color: #f9a504;\n    font-family: inherit;\n    border: none;\n    color: rgb(243,229,171);\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 20px;\n    border-radius: 4px;\n    cursor: pointer;\n    box-shadow: rgba(0, 0, 0, 0.17) 0px -23px 25px 0px inset, rgba(0, 0, 0, 0.15) 0px -36px 30px 0px inset, rgba(0, 0, 0, 0.1) 0px -79px 40px 0px inset, rgba(0, 0, 0, 0.06) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px;\n    &:hover,\n    &:focus {\n        background-color: #beac04;  \n    }\n`;\n","// // Форма додавання контактів. Це статична форма - не змінна (при відправці викликає ф-цію зміни state)\nimport { useSelector, useDispatch } from \"react-redux\";  \nimport { addContactThunk } from \"../../redux/contactsOperations\";\nimport { getContacts } from \"../../redux/selectors\";        \nimport { Form, Input, Button } from \"./styled\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nexport const ContactForm = () => {       \n\n    const { items: contacts } = useSelector(getContacts); // отримуємо масив об'єктів зі стору\n    \n    const dispatch = useDispatch();\n\n    const checkNameClone = (name, number ) => {  \n        const nameClone = contacts.find((contact) => ( // вертає об'єкт з ім'ям, що повторюється (якщо є)\n          contact.name.toLowerCase() === name.toLowerCase()\n        ));\n    \n        if(nameClone) {\n          Notify.failure(`${name} is already in contacts`); \n          return;\n        } \n        const newContact = { name, number }; \n        \n        dispatch(addContactThunk(newContact));  //відправка даних в contactsSlice -> contactsOperations -> contacts-api -> на бекенд\n    };\n\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n\n        const inputName = event.target.elements.name.value.trim();\n        const inputNumber = event.target.elements.number.value.trim();\n        \n        checkNameClone(inputName, inputNumber); \n        event.target.reset();\n    }\n\n\n    return (\n        <Form onSubmit={handleFormSubmit} autoComplete=\"off\">\n            <label>\n                Name\n                    <Input\n                        type=\"text\"\n                        name=\"name\"\n                        // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        placeholder=\"Oles Honchar\"\n                        required\n                    />\n            </label>\n            <label>\n                Number\n                <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    // pattern=\"[\\+]\\d{2}\\s[\\(]\\d{3}[\\)]\\s\\d{3}[\\-]\\d{2}[\\-]\\d{2}\" \n                    // title=\"+38 (050) 222-22-22\" \n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    placeholder=\"459-12-56\"\n                    required\n                />\n            </label>\n            <Button>Add contact</Button>\n        </Form>\n    );\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: inline-flex;\n    flex-direction: column;\n    gap: 30px;\n    border-radius: 4px;\n    color: rgb(243,229,171);\n    padding: 25px;\n    font-family: 'Playfair Display', serif;\n    font-size: 20px;\n    text-align: left;\n`;","// Фільтр пошуку у списку контактів\n\nimport { useDispatch } from \"react-redux\";\nimport { setFilter } from \"../../redux/filterSlice\";\nimport { Input } from '../ContactForm/styled';\nimport { Container } from \"./styled\";\n\n\nexport const Filter = () => { \n    const dispatch = useDispatch();\n\n    const handleChange = ({ target: {value}}) => {\n        dispatch(setFilter(value.trim()));  //відправка даних в filterSlice для записування в стор \n    };\n\n    return (\n        <Container>\n            <label>\n                Find contacts by name\n                <Input \n                    type=\"name\"\n                    name=\"filter\"\n                    // value={filter} - ролі не грає\n                    placeholder=\"Oles\"\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n        </Container>\n    );\n}","//Рендер списку контактів <ul> та його 1го елемента <li>\n\nimport { useMemo } from \"react\";\nimport { deleteContactThunk } from '../../redux/contactsOperations';\nimport { useSelector, useDispatch } from \"react-redux\"; \nimport { getContacts, getFilter } from \"../../redux/selectors\";\nimport { ListContainer, Contact, Wrapper, Name, Details, Button } from \"./styled\";  //Image,\n\n\nexport const ContactList = () => {    // contacts - масив об'єктів \n\n    const { items: contacts, loading, error } = useSelector(getContacts); // дістаємо дані зі стейта\n    const filter = useSelector(getFilter); // рядок зі стору\n\n\n    const filteredContacts = useMemo(() => { // для важких обчислень/фільтрацій, щоб не було перерендеру\n        return contacts.filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase())) \n    }, [contacts, filter]);\n\n    const dispatch = useDispatch();\n    \n    return (\n        <>\n            {error && <h2>{error}</h2>}\n            {loading && <h2>Loading...</h2>}                                  \n            {filteredContacts.length > 0 && (\n                <ListContainer>  \n                    {filteredContacts.map(({ id, name, number }) => (  //phone, email, birthdate, avatar\n                        <Contact key={id}>                         \n                            <Wrapper>\n                                <Name>{name}</Name>\n                                <Details>tel: <a href='tel:number'>{number}</a></Details>\n                            </Wrapper>\n                            {/* <Button type='button' onClick={() => dispatch(updateContactThunk(id))}>Edit</Button> */}\n                            <Button type='button' onClick={() => dispatch(deleteContactThunk(id))}>Delete</Button>\n                        </Contact>      \n                    ))} \n                </ListContainer>   \n            )}\n        </>\n    );\n}","//Компонент спінера відображається, доки відбувається завантаження \nimport { ThreeDots } from  'react-loader-spinner';\n\n\nexport const Loader = () => {\n    return (\n        <ThreeDots \n            height=\"80\" \n            width=\"80\" \n            radius=\"9\"\n            color=\"#4fa94d\" \n            ariaLabel=\"three-dots-loading\"\n            wrapperStyle={{\n                position: 'fixed',\n                top: '40%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',                \n            }}\n            wrapperClassName=\"\"\n            visible={true}\n        />\n    );\n};","import { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContactsThunk } from \"redux/contactsOperations\";\nimport { getContacts, getFilter } from \"../redux/selectors\";\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Loader } from '../components/Loader/Loader';\nimport { Container, SubTitle, AlertMessage } from \"../components/styled\";\n\n\nconst ContactsPage = () => {\n  const { items: contacts, isLoading, error } = useSelector(getContacts); // items - масив об'єктів зі стору\n  const filter = useSelector(getFilter); // рядок зі стору/\n  const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk())  //запит на бекенд за контактами та їх сортування за алфавітом\n  }, [dispatch]);\n\n// Функція, яка шукає співпадіння введеного в фільтр імені з іменами об'єктів масиву, який в state\n// повертає новий масив знайдених об'єктів (якщо фільтр в state пустий, то новий масив контактів не створиться, \n// а з ф-ції повернеться масив контактів, що в state)\n  const filteredContacts = useMemo(() => { // для важких обчислень/фільтрацій, щоб не було перерендеру\n      return contacts.filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase())) \n  }, [contacts, filter]);\n\n    return (\n        <Container>\n            <ContactForm /> \n            <SubTitle>Contacts</SubTitle>\n            <Filter />\n\n            {error && <h2>{error}</h2>}   {/* Наприклад, Request failed with status code 401 - Missing header with authorization token.*/}\n            {isLoading && <Loader/>} \n            {filteredContacts.length !== 0 && <ContactList />}\n            {filteredContacts.length === 0 && <AlertMessage>There are no available contacts. Add some.</AlertMessage>}  \n        </Container>\n    );\n  }\n\n  export default ContactsPage;"],"names":["Form","styled","Input","Button","ContactForm","contacts","useSelector","getContacts","items","dispatch","useDispatch","onSubmit","event","preventDefault","name","number","find","contact","toLowerCase","Notify","newContact","addContactThunk","checkNameClone","target","elements","value","trim","reset","autoComplete","type","title","placeholder","required","pattern","Container","Filter","onChange","setFilter","ContactList","loading","error","filter","getFilter","filteredContacts","useMemo","includes","length","map","id","href","onClick","deleteContactThunk","Loader","height","width","radius","color","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClassName","visible","isLoading","useEffect","fetchContactsThunk"],"sourceRoot":""}